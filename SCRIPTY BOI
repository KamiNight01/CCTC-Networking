DATAGRAM:

#!/usr/bin/env python3

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

ipaddr = '127.0.0.1'
port = 54321

# To send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line
s.sendto(b'Hello Dumbass\n', (ipaddr,port))

# It is recommended that the buffersize used with the recvfrom is a power of 2 and not a very large number in bits.
response, conn = s.recvfrom(1024)

# In order to receive the message that is sent as a btyes-like object you must decode into utf-8(default)
print(response.decode())
--------------------------------------------------------------------------------------------------------------------------------------------------------
STREAM

#/usr/bin/env python3
import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#this can also be accomplished by using s= socket.socket(), because AF_inet and SOCK_STREAM are defailts

ipaddr = '127.0.0.1'
port = 54321

s.connect((ipaddr, port))

# to send  a string as a byte like object, add the prefix b to the string. \nis u sed to go to the next line 
s.send(b'Hello\n')

# it is recommended that th ebufersize used with recvform is a power of 2 and not a very large numbers of bit
response, conn = s.recvfrom(1024)

#in order to receive a message that is sent as byte-like-object, you mist decond into utf-8 (default)
print(response.decode())

s.close()

---------------------------------------------------------------------------------------------------------------------------------------------------------
RAWWWWWWWWW ( DEFAULT ONE )

#!/usr/bin/env python3

#for building the socket
import socket

# FOr system  level commands:
import sys

# for establishing the packet structre. This will allow direct access to the methods and functions in the struct module
from struct import *

#createa  raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''
src_ip = "10.1.0.2"
dst_ip = "10.3.0.2"

#add the IPV4 header information
ip_ver_ihl = 69         # this is putting the decimal conversion off0x45 for version annd Internet header length
ip_tos = 0              # this cobines te DSCP and ECN fields
ip_len = 0              # this kernel will fill in the actual length of the packet
ip_id = 12345           # this sets the IP identification for the packet
ip_frag = 0             # this sets fragmentation to off 
ip_ttl = 64             # this determines the TTL of the packet when leaving the machine
ip_proto = 16           # this sets up the IP protocol to 16 (CHAOS). if this was 6(TCP) or 17(UDP) aditional headers would be required
ip_check = 0            # The kernel will FILL in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip)    # inet_aton(string) will convert an IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)    # inet_aton(string) will convert an IP address to a 32 bit binary number 

# the ! in the string means Big-Endian" network order
ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)

# b turns it to byte like object before transmissions.
message = b'General Announcement:Thicc Thighs save lives'
packet = ip_header + message

# send the packet
s.sendto(packet, (dst_ip, 0))
---------------------------------------------------------------------------------------------------------------------------------------------------------
RAW_SoCKeT_TCP

#!/usr/bin/env python3

#for building the socket
import socket

# For system  level commands:
import sys

# For doing array in the tcp checksum
import array


# for establishing the packet structre. This will allow direct access to the methods and functions in the struct module
from struct import *

#create a raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''
src_ip = "10.1.0.2"
dst_ip = "10.3.0.2"

#add the IPV4 header information
ip_ver_ihl = 69         # this is putting the decimal conversion off0x45 for version annd Internet header length
ip_tos = 0              # this cobines te DSCP and ECN fields
ip_len = 0              # this kernel will fill in the actual length of the packet
ip_id = 12345           # this sets the IP identification for the packet
ip_frag = 0             # this sets fragmentation to off 
ip_ttl = 64             # this determines the TTL of the packet when leaving the machine
ip_proto = 6           # this sets up the IP protocol to 16 (CHAOS). if this was 6(TCP) or 17(UDP) aditional headers would be required
ip_check = 0            # The kernel will FILL in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip)    # inet_aton(string) will convert an IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)    # inet_aton(string) will convert an IP address to a 32 bit binary number 

# the ! in the string means Big-Endian" network order
ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)

#TCP HEADER FIELD#
tcp_src = 54321          #source port
tcp_dst = 7777           #destination port
tcp_seq = 454            # sequence number
tcp_ack_seq = 0          #tcp ack sequence number
tcp_data_off = 5         #data offset specifying  the size of tcp header *4 which is 20
tcp_reserve = 0          #the 3 reserve bits + ns flag is reserve field
tcp_flags = 0            # tcp flags field before the bits are turned on
tcp_win = 65535          # maximum allowd window size reordered to network order
tcp_chk = 0              #tcp checksum which will be calculated later on 
tcp_urg_ptr = 0          #urgent point only if URG flag is set

#combine the left shifted 4 bit tcp offset and the reserve field
tcp_off_res = (tcp_data_off << 4)+ tcp_reserve


# TCP flags by bit stating from right to left
tcp_fin = 0         # Finished
tcp_syn = 1         # Synchronization
tcp_rst = 0         # Reset
tcp_psh = 0         # Push
tcp_ack = 0         # Acknowledgement
tcp_urg = 0         # Urgent
tcp_ece = 0         # Explicit Congestion Notification Echo 
tcp_cwr = 0         # Congestion Windows reduced


# Combine the tcp flags by left shifting the bit locations and adding the bits togather
tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_ack << 3) + (tcp_ack << 4) + (tcp_urg << 5) + (tcp_ece << 6) + (tcp_cwr << 7)


# The ! in the pack format string means network order
tcp_hdr = pack('!HHLLBBHHH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win, tcp_chk, tcp_urg_ptr)

user_data = b'Hello! is this Hidden?'


# create Pseudo header Fields for the tcp checksum
src_address = socket.inet_aton(src_ip)
dst_address = socket.inet_aton(dst_ip)
reserved = 0
protocol = socket.IPPROTO_TCP
tcp_length = len(tcp_hdr) + len(user_data)

# Pack the pseudo header and combine with user data
ps_hdr = pack('!4s4sBBH', src_address, dst_address, reserved, protocol, tcp_length)
ps_hdr = ps_hdr + tcp_hdr + user_data


def checksum(data):
    if len(data) % 2!= 0:
            data +=b'\0'
    res =sum(array.array("H", data))
    res = (res >> 16)+(res & 0xffff)
    res += res >> 16
    return (~res) & 0xffff

tcp_chk = checksum(ps_hdr)

#pack the tcp header to fill in the corrent checksum - remeber checksum is not in network byte order
tcp_hdr= pack('!HHLLBBH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win) + pack('H',tcp_chk) + pack('!H', tcp_urg_ptr)



#combine all of the headers and the use data
packet = ip_header + tcp_hdr + user_data

# Sendd the packet. send to is used when we do not  already have a socket connection.
s.sendto(packet, (dst_ip, 0))

